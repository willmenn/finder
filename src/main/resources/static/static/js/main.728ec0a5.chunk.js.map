{"version":3,"sources":["SingleMap.js","App.js","serviceWorker.js","index.js"],"names":["StoreComponent","_ref","text","react_default","a","createElement","style","color","SimpleMap","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","margin","height","width","lib_default","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","zoom","coordinates","map","c","SingleMap_StoreComponent","lat","latitude","lng","longitude","addressName","Component","App","_this","state","long","latChange","handleLatChange","bind","assertThisInitialized","longChange","handleLongChange","submitAction","handleSubmit","geoLocation","getLocation","getPosition","showPosition","event","setState","target","value","preventDefault","getClosestStores","_this2","axios","get","params","then","response","data","navigator","geolocation","getCurrentPosition","position","coords","className","onSubmit","type","onChange","display","SingleMap","getCenterOrDefault","parseFloat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.728ec0a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nconst StoreComponent = ({ text }) => <div style={{color: 'red'}}>{text}</div>;\n\nclass SimpleMap extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        return (\n            // Important! Always set the container height explicitly\n            <div style={{ margin: 'auto',height: '600px', width: '800px' }}>\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: \"AIzaSyBxgh4JjVSbr7bSW6D9eKsSeYeiYflMuIg\"}}\n                    defaultCenter={this.props.center}\n                    defaultZoom={this.props.zoom}\n                >\n                    {this.props.coordinates.map( c =>{\n                        return <StoreComponent\n                            lat={c.latitude}\n                            lng={c.longitude}\n                            text={c.addressName}\n                        />\n                    })}\n                </GoogleMapReact>\n            </div>\n        );\n    }\n}\n\nexport default SimpleMap;","import React, {Component} from 'react';\nimport './App.css';\nimport SimpleMap from \"./SingleMap\";\nimport axios from 'axios';\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            lat: \"\",\n            long: \"\",\n            coordinates: [],\n            zoom: 11\n        }\n        this.latChange = this.handleLatChange.bind(this);\n        this.longChange = this.handleLongChange.bind(this);\n        this.submitAction = this.handleSubmit.bind(this);\n        this.geoLocation = this.getLocation.bind(this);\n        this.getPosition = this.showPosition.bind(this);\n    }\n\n    componentDidMount(){\n        this.geoLocation.call()\n    }\n    \n    handleLatChange(event) {\n        this.setState({lat: event.target.value});\n    }\n\n    handleLongChange(event) {\n        this.setState({long: event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.getClosestStores();\n        return false;\n    }\n\n\n    getClosestStores() {\n        axios.get('/stores/nearby', {\n            params: {\n                latitude: this.state.lat,\n                longitude: this.state.long\n            }\n        }).then(response => {\n            this.setState({coordinates: response.data})\n        })\n    }\n\n    getLocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getPosition);\n        }\n    }\n\n    showPosition(position) {\n\n        this.setState({lat: position.coords.latitude});\n        this.setState({long: position.coords.longitude});\n        this.getClosestStores();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <form onSubmit={this.submitAction}>\n                    <h4>Latitude:</h4>\n                    <input type='number' value={this.state.lat} onChange={this.latChange}/>\n                    <h4>Longitude:</h4>\n                    <input type='number' value={this.state.long} onChange={this.longChange}/>\n                    <button type='submit' style={{display: 'block', margin: 'auto'}}>\n                        Find closest stores\n                    </button>\n                </form>\n                <SimpleMap center={this.getCenterOrDefault()} zoom={this.state.zoom}\n                           coordinates={this.state.coordinates}/>\n            </div>\n        );\n    }\n\n    getCenterOrDefault() {\n        return {\n            lat: this.state.lat === \"\" ? 52.1 : parseFloat(this.state.lat),\n            lng: this.state.long === \"\" ? 4.8 : parseFloat(this.state.long)\n        };\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}